// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.query.sql

package roles_database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createOneRoles = `-- name: CreateOneRoles :one
INSERT INTO roles (role, permission)
VALUES ($1, $2)
RETURNING id, role, permission, created_at, updated_at
`

type CreateOneRolesParams struct {
	Role       string          `json:"role"`
	Permission json.RawMessage `json:"permission"`
}

func (q *Queries) CreateOneRoles(ctx context.Context, arg CreateOneRolesParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createOneRoles, arg.Role, arg.Permission)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Permission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, role, permission, created_at, updated_at 
FROM roles
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Permission,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByIdRoles = `-- name: GetByIdRoles :one
SELECT id, role, permission, created_at, updated_at 
FROM roles
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetByIdRoles(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getByIdRoles, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Permission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
