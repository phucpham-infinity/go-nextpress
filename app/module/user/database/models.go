// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package user_database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	null "gopkg.in/guregu/null.v4"
)

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type User struct {
	ID            uuid.NullUUID `json:"id"`
	Username      string        `json:"username"`
	Password      string        `json:"password"`
	Email         string        `json:"email"`
	ActivationKey string        `json:"activation_key"`
	Status        UserStatus    `json:"status"`
	CreatedAt     time.Time     `json:"created_at"`
	UpdatedAt     time.Time     `json:"updated_at"`
	RegisteredAt  null.Time     `json:"registered_at"`
	DeletedAt     null.Time     `json:"deleted_at"`
}
